#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞ Genre –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: FLAC, MP3, AIFF
"""

import os
import glob
from mutagen import File as MutagenFile
from mutagen.id3 import TCON
from pathlib import Path
import sys

def update_genre_tags(root_directory="."):
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–≥ Genre –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞—Ö (FLAC, MP3, AIFF)
    –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è
    """
    root_path = Path(root_directory)
    
    if not root_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {root_directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    print(f"üéµ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤: {root_path.absolute()}")
    print(f"üîç –ò—â—É –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã (FLAC, MP3, AIFF)...")
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_files = 0
    updated_files = 0
    errors = 0
    processed_folders = 0
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    AUDIO_EXTENSIONS = ["*.flac", "*.FLAC", "*.mp3", "*.MP3", "*.aiff", "*.AIFF", "*.aif", "*.AIF"]
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–∞–ø–∫–∞ (–Ω–µ —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
    if root_directory != ".":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É –ø–∞–ø–∫—É
        if root_path.is_dir():
            folder_name = root_path.name
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–∞–ø–∫—É: {folder_name}")
            print(f"üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {root_path.absolute()}")
            
            # –ò—â–µ–º –≤—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
            print(f"üîç –ò—â—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ...")
            audio_files = []
            
            for pattern in AUDIO_EXTENSIONS:
                found_files = list(root_path.glob(pattern))
                audio_files.extend(found_files)
                if found_files:
                    print(f"   üîç –ü–æ –º–∞—Å–∫–µ {pattern}: –Ω–∞–π–¥–µ–Ω–æ {len(found_files)} —Ñ–∞–π–ª–æ–≤")
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
            for pattern in AUDIO_EXTENSIONS:
                found_files = list(root_path.rglob(pattern))
                for f in found_files:
                    if f not in audio_files:
                        audio_files.append(f)
            
            if audio_files:
                print(f"   üîç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ: {len(audio_files)} —Ñ–∞–π–ª–æ–≤")
            
            if not audio_files:
                print(f"   ‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏:")
                all_files = list(root_path.iterdir())
                for item in all_files[:10]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                    print(f"      - {item.name} ({'–ø–∞–ø–∫–∞' if item.is_dir() else '—Ñ–∞–π–ª'})")
                if len(all_files) > 10:
                    print(f"      ... –∏ –µ—â–µ {len(all_files) - 10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                return
                
            print(f"   üéß –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤")
            processed_folders = 1
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
            for i, audio_file in enumerate(audio_files, 1):
                print(f"\n   üéµ [{i}/{len(audio_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {audio_file.name}")
                print(f"      üìÇ –ü—É—Ç—å: {audio_file.parent}")
                
                try:
                    total_files += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    file_size = audio_file.stat().st_size
                    print(f"      üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024 / 1024:.1f} MB")
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    print(f"      üîì –û—Ç–∫—Ä—ã–≤–∞—é —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
                    audio = MutagenFile(str(audio_file))
                    
                    if audio is None:
                        print(f"      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                        errors += 1
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∂–∞–Ω—Ä (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç–µ–≥–∏)
                    current_genre = '–ù–ï–¢'
                    if 'GENRE' in audio:
                        genre_value = audio['GENRE']
                        current_genre = str(genre_value[0]) if isinstance(genre_value, list) else str(genre_value)
                    elif hasattr(audio, 'tags') and audio.tags and 'TCON' in audio.tags:
                        # MP3 ID3 —Ç–µ–≥
                        current_genre = str(audio.tags['TCON'].text[0])
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∂–∞–Ω—Ä (–¥–ª—è MP3 –∏—Å–ø–æ–ª—å–∑—É–µ–º TCON frame)
                    if hasattr(audio, 'tags') and hasattr(audio.tags, '__class__') and 'ID3' in audio.tags.__class__.__name__:
                        # MP3 —Ñ–∞–π–ª —Å ID3 —Ç–µ–≥–∞–º–∏
                        audio.tags['TCON'] = TCON(encoding=3, text=[folder_name])
                    else:
                        # FLAC, AIFF –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                        audio['GENRE'] = folder_name
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    audio.save()
                    
                    updated_files += 1
                    print(f"      ‚úÖ –ñ–∞–Ω—Ä: –±—ã–ª–æ '{current_genre}' - —Å—Ç–∞–ª–æ '{folder_name}'")
                    
                except Exception as e:
                    errors += 1
                    print(f"      ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
                    import traceback
                    print(f"      üêõ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        else:
            print(f"‚ùå {root_directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π!")
            return
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
        folders = [folder for folder in root_path.iterdir() if folder.is_dir()]
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {len(folders)}")
        
        for folder_path in folders:
            folder_name = folder_path.name
            print(f"\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É: {folder_name}")
            processed_folders += 1
            
            # –ò—â–µ–º –≤—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
            audio_files = []
            for pattern in AUDIO_EXTENSIONS:
                audio_files.extend(list(folder_path.glob(pattern)))
            
            if not audio_files:
                print(f"   ‚ÑπÔ∏è  –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue
                
            print(f"   üéß –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
            for i, audio_file in enumerate(audio_files, 1):
                print(f"   üéµ [{i}/{len(audio_files)}] {audio_file.name}")
                
                try:
                    total_files += 1
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    audio = MutagenFile(str(audio_file))
                    
                    if audio is None:
                        print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                        errors += 1
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∂–∞–Ω—Ä (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç–µ–≥–∏)
                    current_genre = '–ù–ï–¢'
                    if 'GENRE' in audio:
                        genre_value = audio['GENRE']
                        current_genre = str(genre_value[0]) if isinstance(genre_value, list) else str(genre_value)
                    elif hasattr(audio, 'tags') and audio.tags and 'TCON' in audio.tags:
                        # MP3 ID3 —Ç–µ–≥
                        current_genre = str(audio.tags['TCON'].text[0])
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∂–∞–Ω—Ä (–¥–ª—è MP3 –∏—Å–ø–æ–ª—å–∑—É–µ–º TCON frame)
                    if hasattr(audio, 'tags') and hasattr(audio.tags, '__class__') and 'ID3' in audio.tags.__class__.__name__:
                        # MP3 —Ñ–∞–π–ª —Å ID3 —Ç–µ–≥–∞–º–∏
                        audio.tags['TCON'] = TCON(encoding=3, text=[folder_name])
                    else:
                        # FLAC, AIFF –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
                        audio['GENRE'] = folder_name
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    audio.save()
                    
                    updated_files += 1
                    print(f"   ‚úÖ –ñ–∞–Ω—Ä: –±—ã–ª–æ '{current_genre}' - —Å—Ç–∞–ª–æ '{folder_name}'")
                    
                except Exception as e:
                    errors += 1
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n" + "="*60)
    print(f"üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞–ø–æ–∫: {processed_folders}")
    print(f"   üéµ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_files}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_files}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")
    print(f"="*60)
    
    if errors > 0:
        print(f"\n‚ö†Ô∏è  –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏")
    
    if total_files == 0:
        print(f"\nü§î –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å:")
        print(f"   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞")
        print(f"   - –ï—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .flac, .mp3 –∏–ª–∏ .aiff")
        print(f"   - –î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è")

def input_directory():
    """
    –í–≤–æ–¥ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    """
    current_path = Path(".")
    
    while True:
        try:
            print(f"\nüìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_path.absolute()}")
            folder_name = input(f"üéØ –í–≤–µ–¥–∏ –∏–º—è –ø–∞–ø–∫–∏ (–∏–ª–∏ '.' –¥–ª—è –≤—Å–µ—Ö –ø–∞–ø–æ–∫, 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
            
            if folder_name.lower() == 'exit':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return None
            
            if folder_name == ".":
                return "."  # –í—Å–µ –ø–∞–ø–∫–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
            folder_path = current_path / folder_name
            
            if folder_path.exists() and folder_path.is_dir():
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
                return str(folder_path)
            else:
                print(f"‚ùå –ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return None

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üéµ –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ Genre –≤ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞—Ö")
    print("   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: FLAC, MP3, AIFF")
    print("=" * 50)
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if len(sys.argv) > 1:
        directory = sys.argv[1]
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: {directory}")
    else:
        # –í–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        directory = input_directory()
        if directory is None:
            return
    
    try:
        update_genre_tags(directory)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main() 