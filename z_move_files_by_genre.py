#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
–ß–∏—Ç–∞–µ—Ç —Ç–µ–≥ GENRE –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∞–ø–∫–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: FLAC, MP3, MP4, OGG, OPUS, AIFF
–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä –∏–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–æ–∫
"""

import os
import shutil
from pathlib import Path
import sys
from mutagen import File as MutagenFile
from mutagen.flac import FLAC
from mutagen.mp3 import MP3
from mutagen.mp4 import MP4
from mutagen.oggvorbis import OggVorbis
from mutagen.oggopus import OggOpus
from mutagen.aiff import AIFF
from mutagen.id3 import TCON
import re
import signal
import subprocess
import platform
import threading
import time
import select

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
interrupted = False

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    global interrupted
    interrupted = True
    print("\n\n‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)

def check_exit(input_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–π—Ç–∏"""
    if input_str.lower() in ['q', 'quit', 'exit', '–≤—ã—Ö–æ–¥', '0']:
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        sys.exit(0)
    return False

def safe_input(prompt):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã—Ö–æ–¥–∞"""
    try:
        user_input = input(prompt).strip()
        check_exit(user_input)
        return user_input
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)

def play_audio_file(file_path, background=False):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    """
    try:
        system = platform.system().lower()
        
        if system == "darwin":  # macOS
            if background:
                subprocess.Popen(["afplay", str(file_path)], 
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            else:
                subprocess.run(["afplay", str(file_path)], check=True)
        elif system == "linux":
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–ª–µ–µ—Ä—ã –¥–ª—è Linux
            players = ["mpv", "mplayer", "vlc", "paplay"]
            for player in players:
                try:
                    if background:
                        subprocess.Popen([player, str(file_path)], 
                                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    else:
                        subprocess.run([player, str(file_path)], check=True, 
                                     stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    break
                except (subprocess.CalledProcessError, FileNotFoundError):
                    continue
            else:
                print("   ‚ùå ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä –¥–ª—è Linux")
                return False
        elif system == "windows":
            # Windows
            if background:
                subprocess.Popen(["start", str(file_path)], shell=True, 
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            else:
                subprocess.run(["start", str(file_path)], shell=True, check=True)
        else:
            print(f"   ‚ùå ‚ö†Ô∏è  –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")
            return False
            
        return True
        
    except subprocess.CalledProcessError:
        print("   ‚ùå ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
        return False
    except Exception as e:
        print(f"   ‚ùå ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {str(e)}")
        return False

def play_audio_with_interrupt(file_path):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤–∏—à–∏
    –ù–∞—á–∏–Ω–∞–µ—Ç —Å 1-–π –º–∏–Ω—É—Ç—ã (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 60 —Å–µ–∫—É–Ω–¥)
    """
    try:
        system = platform.system().lower()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffplay –¥–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º - –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç -ss –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        cmd = ["ffplay", "-ss", "60", "-nodisp", "-autoexit", str(file_path)]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        print("   (–Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
        while process.poll() is None:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if sys.stdin in select.select([sys.stdin], [], [], 0.1)[0]:
                    input()  # –ß–∏—Ç–∞–µ–º –≤–≤–æ–¥
                    # –°—Ä–∞–∑—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º ffplay
                    process.terminate()
                    try:
                        process.wait(timeout=0.5)
                    except subprocess.TimeoutExpired:
                        process.kill()
                    break
            except:
                # –ï—Å–ª–∏ select –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                try:
                    import msvcrt
                    if msvcrt.kbhit():
                        msvcrt.getch()
                        # –°—Ä–∞–∑—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º ffplay
                        process.terminate()
                        try:
                            process.wait(timeout=0.5)
                        except subprocess.TimeoutExpired:
                            process.kill()
                        break
                except:
                    pass
            time.sleep(0.1)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if process.poll() is None:
            process.terminate()
            try:
                process.wait(timeout=1)
            except subprocess.TimeoutExpired:
                process.kill()
                try:
                    process.wait(timeout=1)
                except subprocess.TimeoutExpired:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pkill –¥–ª—è ffplay
                    if system in ["darwin", "linux"]:
                        try:
                            subprocess.run(["pkill", "-f", "ffplay"], 
                                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                        except:
                            pass
                    elif system == "windows":
                        try:
                            subprocess.run(["taskkill", "/F", "/IM", "ffplay.exe"], 
                                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                        except:
                            pass
        
        print("   ‚èπÔ∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"   ‚ùå ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {str(e)}")
        return False

def open_audio_file(file_path):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø–ª–µ–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    try:
        system = platform.system().lower()
        
        if system == "darwin":  # macOS
            subprocess.run(["open", str(file_path)], check=True)
        elif system == "linux":
            subprocess.run(["xdg-open", str(file_path)], check=True)
        elif system == "windows":
            subprocess.run(["start", str(file_path)], shell=True, check=True)
        else:
            print(f"   ‚ùå ‚ö†Ô∏è  –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")
            return False
            
        return True
        
    except subprocess.CalledProcessError:
        print("   ‚ùå ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞")
        return False
    except Exception as e:
        print(f"   ‚ùå ‚ö†Ô∏è  –û—à–∏–±–∫–∞: {str(e)}")
        return False

def play_audio_and_return(audio_file):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫ –∏ —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞–ø–∫–∏
    """
    print(f"\nüéµ ‚ñ∂Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞: {audio_file.name}")
    if not play_audio_with_interrupt(audio_file):
        print("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
    return 'back'

def debug_mp3_tags(file_path):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –≤ MP3 —Ñ–∞–π–ª–µ
    """
    try:
        audio = MP3(str(file_path))
        print(f"      üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ –≤ {file_path.name}:")
        for key, value in audio.items():
            print(f"         {key}: {value}")
        return True
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–≥–æ–≤: {str(e)}")
        return False

def get_genre_from_file(file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∂–∞–Ω—Ä –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: FLAC, MP3, MP4, OGG, OPUS, AIFF
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        file_ext = file_path.suffix.lower()
        
        if file_ext == '.flac':
            audio = FLAC(str(file_path))
        elif file_ext == '.mp3':
            audio = MP3(str(file_path))
        elif file_ext in ['.m4a', '.mp4']:
            audio = MP4(str(file_path))
        elif file_ext == '.ogg':
            # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø OGG —Ñ–∞–π–ª–∞
            try:
                audio = OggVorbis(str(file_path))
            except:
                audio = OggOpus(str(file_path))
        elif file_ext == '.opus':
            audio = OggOpus(str(file_path))
        elif file_ext == '.aiff':
            audio = AIFF(str(file_path))
        else:
            # –ü—Ä–æ–±—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            audio = MutagenFile(str(file_path))
        
        if audio is None:
            return None
            
        # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä - –¥–ª—è MP3 –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–µ–≥–∏
        genre = None
        
        if file_ext == '.mp3':
            # –î–ª—è MP3 –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–≥–æ–≤ –∂–∞–Ω—Ä–∞
            genre_tags = ['TCON', 'GENRE', 'Genre', 'genre']
            for tag in genre_tags:
                if tag in audio:
                    genre_value = audio[tag]
                    print(f"      üîç –ù–∞–π–¥–µ–Ω —Ç–µ–≥ {tag}: {genre_value} (—Ç–∏–ø: {type(genre_value)})")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π
                    if isinstance(genre_value, list) and len(genre_value) > 0:
                        genre = str(genre_value[0])
                    elif isinstance(genre_value, str):
                        genre = genre_value
                    elif hasattr(genre_value, 'text'):
                        # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ mutagen
                        genre = str(genre_value.text[0]) if genre_value.text else str(genre_value)
                    else:
                        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É
                        genre = str(genre_value)
                    
                    if genre:
                        print(f"      ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –∂–∞–Ω—Ä: '{genre}'")
                        break
            
            # –ï—Å–ª–∏ –∂–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if not genre:
                print(f"      ‚ö†Ô∏è  –ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MP3 —Ñ–∞–π–ª–µ")
                debug_mp3_tags(file_path)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π GENRE
            if 'GENRE' in audio:
                genre_value = audio['GENRE']
                if isinstance(genre_value, list) and len(genre_value) > 0:
                    genre = str(genre_value[0])
                elif isinstance(genre_value, str):
                    genre = genre_value
        
        # –û—á–∏—â–∞–µ–º –∂–∞–Ω—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if genre:
            # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É '/' –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            genre = genre.split('/')[0].strip()
            
            # –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω –ø–∞–ø–æ–∫
            genre = re.sub(r'[<>:"\\|?*]', '_', genre.strip())
            genre = re.sub(r'\s+', ' ', genre)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            
        return genre if genre else None
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def find_similar_folders(base_path, genre):
    """
    –ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏
    """
    existing_folders = [folder.name for folder in base_path.iterdir() if folder.is_dir()]
    similar_folders = []
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    genre_lower = genre.lower()
    for folder in existing_folders:
        folder_lower = folder.lower()
        if genre_lower in folder_lower or folder_lower in genre_lower:
            similar_folders.append(folder)
    
    return similar_folders

def get_folder_name_from_user(base_path, genre, audio_file=None):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–µ–∫
    """
    # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–∞–ø–∫–∏
    similar_folders = find_similar_folders(base_path, genre)
    
    if similar_folders:
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∂–∞–Ω—Ä–∞ '{genre}': {similar_folders[0]}")
        if audio_file:
            print(f"üéµ –¢—Ä–µ–∫: {audio_file.name}")
            print(f"üéµ ‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–µ–∫...")
            play_audio_with_interrupt(audio_file)
        
        # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–æ–º
        default_folder = f"_{genre}"
        folder_name = safe_input(f"\n‚úèÔ∏è  –í–≤–µ–¥–∏—Ç–µ –ø–∞–ø–∫—É –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞—Ç—å ({default_folder}): ").strip()
        
        if not folder_name:
            folder_name = default_folder
        
        return folder_name
    else:
        print(f"\nüìÅ –ü–∞–ø–∫–∞ –¥–ª—è –∂–∞–Ω—Ä–∞ '{genre}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        if audio_file:
            print(f"üéµ –¢—Ä–µ–∫: {audio_file.name}")
            print(f"üéµ ‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫–∞—é —Ç—Ä–µ–∫...")
            play_audio_with_interrupt(audio_file)
        
        # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–æ–º
        default_folder = f"_{genre}"
        folder_name = safe_input(f"\n‚úèÔ∏è  –í–≤–µ–¥–∏—Ç–µ –ø–∞–ø–∫—É –∫–æ—Ç–æ—Ä—É—é —Å–æ–∑–¥–∞—Ç—å ({default_folder}): ").strip()
        
        if not folder_name:
            folder_name = default_folder
        
        return folder_name

def create_genre_folder(base_path, genre, audio_file=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –∂–∞–Ω—Ä–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (genre_folder, new_genre_name, is_custom, was_created)
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    genre_folder = base_path / genre
    if genre_folder.exists():
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {genre}")
        return genre_folder, genre, False, False
    
    # –ï—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    folder_name = get_folder_name_from_user(base_path, genre, audio_file)
    genre_folder = base_path / folder_name
    
    try:
        was_created = False
        if genre_folder.exists():
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
        else:
            genre_folder.mkdir(exist_ok=True)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
            was_created = True
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–æ –ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è
        is_custom = folder_name != genre and not folder_name.startswith('_')
        return genre_folder, folder_name, is_custom, was_created
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ {folder_name}: {str(e)}")
        return None, None, False, False

def update_genre_in_file(file_path, new_genre):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∂–∞–Ω—Ä –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        file_ext = file_path.suffix.lower()
        
        if file_ext == '.flac':
            audio = FLAC(str(file_path))
        elif file_ext == '.mp3':
            audio = MP3(str(file_path))
        elif file_ext in ['.m4a', '.mp4']:
            audio = MP4(str(file_path))
        elif file_ext == '.ogg':
            try:
                audio = OggVorbis(str(file_path))
            except:
                audio = OggOpus(str(file_path))
        elif file_ext == '.opus':
            audio = OggOpus(str(file_path))
        elif file_ext == '.aiff':
            audio = AIFF(str(file_path))
        else:
            audio = MutagenFile(str(file_path))
        
        if audio is None:
            return False
            
        # –û—á–∏—â–∞–µ–º –∂–∞–Ω—Ä –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        if new_genre:
            # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ '/'
            clean_genre = new_genre.split('/')[0].strip()
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã '_' –∏–∑ –Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
            clean_genre = clean_genre.lstrip('_')
        else:
            clean_genre = new_genre
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∂–∞–Ω—Ä - –¥–ª—è MP3 –∏—Å–ø–æ–ª—å–∑—É–µ–º TCON —Ç–µ–≥
        if file_ext == '.mp3':
            # –î–ª—è MP3 –∏—Å–ø–æ–ª—å–∑—É–µ–º TCON (Text Content) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–≥ –¥–ª—è –∂–∞–Ω—Ä–∞ –≤ ID3v2
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç TCON
            audio['TCON'] = TCON(encoding=3, text=clean_genre)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º GENRE
            audio['GENRE'] = clean_genre
            
        audio.save()
        return True
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∞–Ω—Ä–∞: {str(e)}")
        return False

def move_file_to_genre_folder(file_path, genre_folder, genre, new_genre_name=None):
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –∂–∞–Ω—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–≥ –∂–∞–Ω—Ä–∞
    """
    try:
        destination = genre_folder / file_path.name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if destination.exists():
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            counter = 1
            name_parts = file_path.stem, file_path.suffix
            while destination.exists():
                new_name = f"{name_parts[0]}_{counter}{name_parts[1]}"
                destination = genre_folder / new_name
                counter += 1
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
        shutil.move(str(file_path), str(destination))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥ –∂–∞–Ω—Ä–∞ –≤ —Ñ–∞–π–ª–µ
        if new_genre_name and new_genre_name != genre:
            print(f"   üîÑ –û–±–Ω–æ–≤–ª—è—é –∂–∞–Ω—Ä –≤ —Ñ–∞–π–ª–µ: '{genre}' ‚Üí '{new_genre_name}'")
            if update_genre_in_file(destination, new_genre_name):
                print(f"   ‚úÖ –ñ–∞–Ω—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∂–∞–Ω—Ä –≤ —Ñ–∞–π–ª–µ")
        
        return destination
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def process_files_by_genre(search_directory=".", output_directory="."):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏—Ö –≤ –ø–∞–ø–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
    """
    search_path = Path(search_directory)
    output_path = Path(output_directory)
    
    if not search_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ {search_directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    if not output_path.exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–∞ {output_directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    
    print(f"üéµ –ò—â—É —Ñ–∞–π–ª—ã –≤: {search_path.absolute()}")
    print(f"üìÅ –°–æ–∑–¥–∞—é –ø–∞–ø–∫–∏ –∂–∞–Ω—Ä–æ–≤ –≤: {output_path.absolute()}")
    print(f"üîç –ò—â—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã...")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    audio_extensions = ['.flac', '.FLAC', '.mp3', '.MP3', '.m4a', '.M4A', 
                       '.mp4', '.MP4', '.ogg', '.OGG', '.opus', '.OPUS',
                       '.aiff', '.AIFF']
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_files = 0
    moved_files = 0
    no_genre_files = 0
    errors = 0
    genres_found = set()
    created_folders = set()
    existing_folders = set()
    
    # –ò—â–µ–º –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –≤ –∫–æ—Ä–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ (–±–µ–∑ –ø–æ–¥–ø–∞–ø–æ–∫)
    audio_files = []
    for ext in audio_extensions:
        found_files = list(search_path.glob(f"*{ext}"))
        audio_files.extend(found_files)
    
    if not audio_files:
        print(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print(f"üîç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(audio_extensions)}")
        return
    
    print(f"üéß –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É "Unknown" –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∂–∞–Ω—Ä–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–∞
    unknown_folder = output_path / "Unknown"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, audio_file in enumerate(audio_files, 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        if interrupted:
            print("\n‚èπÔ∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
            
        print(f"\nüéµ [{i}/{len(audio_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {audio_file.name}")
        print(f"   üìÇ –¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {audio_file.parent}")
        
        try:
            total_files += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä –∏–∑ —Ñ–∞–π–ª–∞
            genre = get_genre_from_file(audio_file)
            
            if not genre:
                print(f"   ‚ö†Ô∏è  –ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–º–µ—â–∞—é –≤ –ø–∞–ø–∫—É 'Unknown'")
                genre = "Unknown"
                no_genre_files += 1
            else:
                print(f"   üé≠ –ñ–∞–Ω—Ä: {genre}")
                genres_found.add(genre)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∂–∞–Ω—Ä–∞ (—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º)
            genre_folder, new_genre_name, is_custom, was_created = create_genre_folder(output_path, genre, audio_file)
            if not genre_folder:
                errors += 1
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–ø–æ–∫
            if was_created:
                created_folders.add(new_genre_name)
            else:
                existing_folders.add(new_genre_name)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –∂–∞–Ω—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏)
            destination = move_file_to_genre_folder(audio_file, genre_folder, genre, new_genre_name)
            if destination:
                moved_files += 1
                print(f"   ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω –≤: {destination}")
            else:
                errors += 1
                
        except Exception as e:
            errors += 1
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n" + "="*60)
    print(f"üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üéµ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_files}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {moved_files}")
    print(f"   ‚ö†Ô∏è  –ë–µ–∑ –∂–∞–Ω—Ä–∞ (–≤ –ø–∞–ø–∫—É 'Unknown'): {no_genre_files}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")
    print(f"   üé≠ –ù–∞–π–¥–µ–Ω–æ –∂–∞–Ω—Ä–æ–≤: {len(genres_found)}")
    
    if genres_found:
        print(f"\nüé≠ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã:")
        for genre in sorted(genres_found):
            print(f"   - {genre}")
    
    if created_folders:
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:")
        for folder in sorted(created_folders):
            print(f"   - {folder}")
    
    if existing_folders:
        print(f"\nüìÇ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏:")
        for folder in sorted(existing_folders):
            print(f"   - {folder}")
    
    if no_genre_files > 0:
        print(f"\nüìÅ –§–∞–π–ª—ã –±–µ–∑ –∂–∞–Ω—Ä–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–∞–ø–∫—É: Unknown")
    
    print(f"="*60)

def get_search_directory():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    """
    print(f"\nüîç –ì–¥–µ –∏—Å–∫–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã?")
    print(f"üìÅ 1. –í —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    print(f"   {Path('.').absolute()}")
    print(f"üìÇ 2. –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
    print(f"üö™ q. –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = safe_input(f"\nüéØ ‚û§ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-2, q –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
            
            if choice == "1":
                search_dir = "."
                print(f"\n‚úÖ üéØ –í—ã–±—Ä–∞–Ω–æ: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
                print(f"   üìç –ü—É—Ç—å: {Path('.').absolute()}")
                break
            elif choice == "2":
                search_path = safe_input(f"\nüìÅ ‚úèÔ∏è  –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ (q –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
                if not search_path:
                    print("‚ùå ‚ö†Ô∏è  –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                    continue
                search_dir = search_path
                if not Path(search_dir).exists():
                    print(f"‚ùå ‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {search_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    continue
                print(f"\n‚úÖ üéØ –í—ã–±—Ä–∞–Ω–æ: –∫–∞—Å—Ç–æ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
                print(f"   üìç –ü—É—Ç—å: {Path(search_dir).absolute()}")
                break
            else:
                print("‚ùå ‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 2")
                
        except ValueError:
            print("‚ùå ‚ö†Ô∏è  –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return None, None
    
    return search_dir, None

def get_output_directory():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∞–ø–æ–∫ –∂–∞–Ω—Ä–æ–≤
    """
    print(f"\nüìÅ –ì–¥–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞–ø–∫–∏ –∂–∞–Ω—Ä–æ–≤?")
    print(f"üìÅ 1. –í —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    print(f"   {Path('.').absolute()}")
    print(f"üìÇ 2. –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
    print(f"üö™ q. –í—ã—Ö–æ–¥")
    
    while True:
        try:
            choice = safe_input(f"\nüéØ ‚û§ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-2, q –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
            
            if choice == "1":
                output_dir = "."
                print(f"\n‚úÖ üéØ –í—ã–±—Ä–∞–Ω–æ: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
                print(f"   üìç –ü–∞–ø–∫–∏ –∂–∞–Ω—Ä–æ–≤ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –≤: {Path('.').absolute()}")
                break
            elif choice == "2":
                output_path = safe_input(f"\nüìÅ ‚úèÔ∏è  –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫ –∂–∞–Ω—Ä–æ–≤ (q –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
                if not output_path:
                    print("‚ùå ‚ö†Ô∏è  –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                    continue
                output_dir = output_path
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                try:
                    Path(output_dir).mkdir(parents=True, exist_ok=True)
                    print(f"\n‚úÖ üéØ –í—ã–±—Ä–∞–Ω–æ: –∫–∞—Å—Ç–æ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")
                    print(f"   üìç –ü–∞–ø–∫–∏ –∂–∞–Ω—Ä–æ–≤ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –≤: {Path(output_dir).absolute()}")
                except Exception as e:
                    print(f"‚ùå ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
                    continue
                break
            else:
                print("‚ùå ‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 2")
                
        except ValueError:
            print("‚ùå ‚ö†Ô∏è  –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return None
    
    return output_dir

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    
    print("üéµ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –∂–∞–Ω—Ä–∞–º")
    print("=" * 50)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã!")
    print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è!")
    print()
    print("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤—ã–π—Ç–∏, –≤–≤–µ–¥—è 'q' –∏–ª–∏ –Ω–∞–∂–∞–≤ Ctrl+C")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    search_dir, _ = get_search_directory()
    if search_dir is None:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫ –∂–∞–Ω—Ä–æ–≤
    output_dir = get_output_directory()
    if output_dir is None:
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    print(f"\nüéµ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤:")
    print(f"üîç –ò—â–µ–º —Ñ–∞–π–ª—ã –≤: {Path(search_dir).absolute()}")
    print(f"üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –∂–∞–Ω—Ä–æ–≤ –≤: {Path(output_dir).absolute()}")
    print(f"üìã –§–∞–π–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ –∂–∞–Ω—Ä–∞–º!")
    
    try:
        process_files_by_genre(search_dir, output_dir)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()
